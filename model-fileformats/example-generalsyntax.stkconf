;  GENERAL SYNTAX
/{
At the beginning of each file, there must be a section which describs your model.
Here is an example:
 To see results of examples of this file
  python -m simtoolkit/methods model-fileformats/general-syntax.stkconf
}
;  everything after (semicolon) is a comment, but it isn't a silent comment.
;  Each parameter has a name and a value and obligatory explanations for parameter, which appears in the --help output
;                        V          V          V
;                     /name   =   value   ;  comment
;
;  Only lines which STARTS from (semicolon) are ignored!
;
;==========================================================================================;
;===                                PARAMETER NAMES                                     ===;
;  Parameter Names are hierarchically organized in the tree.
;  Hierarchical position of names are given by standard form /top-level/bottom-level.
;
;  Any configuration has a root /, which must be explicitly set.
;  Example:
   /parameter1 = 12       ; first parameter in the model
   /group/parameter1 = 11 ; first parameter in the group 
   /group/parameter2 = .5 ; second parameter in the group

;  Subtrees may be defined by the 'branch' notation
   /group2 {
;              ^no semicolon here
      /parameter1 = 144   ; parameter 1 in group 2
      /parameter2 = 143   ; parameter 2 in group 2
   }
;    ^ no semicolon here again
; The definition above is equivalent of
;  /group2/parameter1 = 144   ; parameter 1 in group 2
;  /group2/parameter2 = 143   ; parameter 2 in group 2

;  Branch notation may be hierarchical too
   /group3 {
     /subgroup {
       /p1 = 1; parameter 1 of subgroup in group 3
       /p2 = 2; parameter 2 of subgroup in group 3
     }
     /p1 = 3  ; parameter 1 in group 3
     /p2 = 4  ; parameter 2 in group 3
   }
; The definition above is equivalent of
;   /group3/subgroup/p1 = 1; parameter 1 of subgroup in group 3
;   /group3/subgroup/p2 = 2; parameter 2 of subgroup in group 3
;   /group3/p1 = 3         ; parameter 1 in group 3
;   /group3/p2 = 4         ; parameter 2 in group 3

;==========================================================================================;
;===                              VALUES and CALCULATIONS                               ===;
; In the parameter definition, the equal character = is a separator between a 
; parameter name and its value.
; The right hand side of parameter definition is a expanded python expression.
; Therefore all python types (except dictionary) work.
; For example
 /types/{
   /int    = 12                  ; this is an integer
   /float = 2.5                  ; this is an float
   /bool  = True                 ; this is a boolean parameter
   /str   = "I love python"      ; string will be a string
   /list  = [0,1,2,3,4]          ; this is a standard list
   /tuple = (0,1,2,3,4)          ; a tuple
   /dict  = {'a':1,'b':2,'c':3}  ; but a dictionary will be converted in a subtree
; therefore the last expression will be interpreted like this:
;        /dict/a = 1             ; but a dictionary will be converted in the subtree
;        /dict/b = 2             ; but a dictionary will be converted in the subtree
;        /dict/c = 3             ; but a dictionary will be converted in the subtree
; NOTE Don't use dictionaries, they triggers an WARNING message or ERROR.
;      Please open all dictionaries as a subtrees
   /func = lambda x: x**2        ; this is a function.
 }
;
; The right hand side of parameter definition is an eligible python command, therefore
; it can do all sorts of calculations!!!
   /2by2is = 2*2                                                 ; calculates 2*2
   /xlst   = [ x for x in range(10) if x%3 != 0 ]                ; /xlst is [1, 2, 4,  5,   7,  8]

;==========================================================================================;
;===                       Values and messages can span multiple lines                  ===;
   /Multiline/Item = "This string is very long" \               ; the beginning 
                     +" and should be continued on a next line" ; and the end of long string


;==========================================================================================;
;===                              LINKS, STRINGS and HASHES                             ===;
; A value of any parameter may be reference by @@ operator. 
;  @/parameter1@ is a reference on a very first parameter in this STKconf file
; We can use it in calculations of an other parameter
; Here are simple example:
   /L = range( @/parameter1@\        ; equals to range(12), but if  /parameter1 
                            \        ; is altered through command line arguments
                            )        ; it will also change parameter /L
   /P = @/xlst@[::@/2by2is@]         ; P uses a list and filters out values using an other variable
                                     ; which was calculate.
                                     ; /P is P just every 4th value of  /xlst, i.e [1, 7]
; Functions can be called though links
   /calc   = [ @/types/func@(x) for x in \               ; the range depends upon /group/parameter1
                range(@/group/parameter1@) if x%3 != 0 ] ; i.e /calc is [1, 4, 16, 25, 49, 64, 100]
; Or with reference to an other list 
   /calc2  = [ @/types/func@(x) for x in @/xlst@ ]               ; /calc is [1, 4, 16, 25, 49, 64]
;
; A value of some parameter can be inserted as a string by the special opertor $$
;  $/parameter1$ is a string representation of /parameter1, i,e '12'
   /str/I = "I"                          ; It is me
   /str/Love = "Love"                    ; General feeling
   /str/The_True_Story = "{} {} Python"\ ; The beginning and 
            .format($/str/I$,$/str/Love$); the end of the true Story
                                         ; As you can see /str/The_True_Story = "I Love Python"
;
; Finally you can get hash sum of any parameter and all parent parameters
;  by calling parameter in operator ##
   /hash/I    = #/str/I#                ; Hash sum of I
   /hash/Love = #/str/Love#             ; Hash sum of Love
   /hash/The_True_Story = \             ; And a hash sum of
             #/str/The_True_Story#      ; the True Story is a combination of hash sums above

;==========================================================================================;
;===                                    ITERATORS                                       ===;
; Expressions inside `` are refer as iterators. If expression has the equal sing (=) it defines
; an iterator.
; Example `x=[1,2,3]` defines iterator x which goes through 1 2 and 3. The definition must be
; in parameter name, not in parameter value!
; If there is no the equal sing, the expression is interpreted as a reference to an iterator:
; An example below:
;              v--Defenition--v AND v-v Reference
  /MyGroup/Item` x = range(3) `  =  `x` ; Iteratable item
; is equals to
; /MyGroup/Item0             = 0 ;Iteratable item
; /MyGroup/Item1             = 1 ;Iteratable item
; /MyGroup/Item2             = 2 ;Iteratable item

; Iterators can use values of STK parameter ...
; Example: This is a usual variable, a list
  /Some/Variable             = [1,2,3,4]         ; just standard variable
; But it can be used in iterator.....
;           v----------------------v this part will be treated as standard STKconf expression,
;           v                      v but x won't appear in the name space.  
;           v                      v It exists in "iterators" space
  /MultiIter/` i = @/Some/Variable@ `/{    
    /FirstIterator = `i`                         ; this should be an iterator, we just refer to iterator i
; Here we create an nested iterator. It is completely OK!
;              v-------------v  Here is a definition of another iterator
    /SecondIter_` y= range(3) `/{
        /Iterator     = `y`                      ; the second iterator is set by reference
; We can to do calculations with iterators as with normal parameters...
        /CalculateMul = `i`*`y`                  ; calculates multiple of both iterators
; Iterator can be used with links and functions
        /IterFunc     = @/types/func@(`i`+`y`)   ; Function from iterators sum
    }
  }
; This will result as complex tree structure shown below
;   /
;   |-v: MultiIter 
;   | |-v: 1 
;   | | |- > FirstIterator  1
;   | | |-v: SecondIter_0 
;   | | | |- > Iterator  0
;   | | | |- > CalculateMul  0
;   | | | `- > IterFunc  1
;   | | |-v: SecondIter_1 
;   | | | |- > Iterator  1
;   | | | |- > CalculateMul  1
;   | | | `- > IterFunc  4
;   | | `-v: SecondIter_2 
;   | |   |- > Iterator  2
;   | |   |- > CalculateMul  2
;   | |   `- > IterFunc  9
;   | |-v: 2 
;   | | |- > FirstIterator  2
;   | | |-v: SecondIter_0 
;   | | | |- > Iterator  0
;   | | | |- > CalculateMul  0
;   | | | `- > IterFunc  4
;   | | |-v: SecondIter_1 
;   | | | |- > Iterator  1
;   | | | |- > CalculateMul  2
;   | | | `- > IterFunc  9
;   | | `-v: SecondIter_2 
;   | |   |- > Iterator  2
;   | |   |- > CalculateMul  4
;   | |   `- > IterFunc  16
;   | |-v: 3 
;   | | |- > FirstIterator  3
;   | | |-v: SecondIter_0 
;   | | | |- > Iterator  0
;   | | | |- > CalculateMul  0
;   | | | `- > IterFunc  9
;   | | |-v: SecondIter_1 
;   | | | |- > Iterator  1
;   | | | |- > CalculateMul  3
;   | | | `- > IterFunc  16
;   | | `-v: SecondIter_2 
;   | |   |- > Iterator  2
;   | |   |- > CalculateMul  6
;   | |   `- > IterFunc  25
;   | `-v: 4 
;   |   |- > FirstIterator  4
;   |   |-v: SecondIter_0 
;   |   | |- > Iterator  0
;   |   | |- > CalculateMul  0
;   |   | `- > IterFunc  16
;   |   |-v: SecondIter_1 
;   |   | |- > Iterator  1
;   |   | |- > CalculateMul  4
;   |   | `- > IterFunc  25
;   |   `-v: SecondIter_2 
;   |     |- > Iterator  2
;   |     |- > CalculateMul  8
;   |     `- > IterFunc  36


; A life example
; A set of Click stimulus with different ITD and ILD
/STIMULI/Click` c= linspace(-1.1,1.1,6) `-` d=linspace(0,1,11)`/{
	/StimGen/type      = 'click'                                                                   ; type of for Click`c`-`d` simulation
	/StimGen/interaural-time-difference       = `c`                                                ; ITD for for Click`c`-`d` simulation
	/StimGen/interaural-level-difference      = `d`                                                ; IPD for Click`c`-`d`
;	/StimGen/left-an   = @/an-configuration/left/an@                                               ; Left AN configuration
;	/StimGen/right-an  = @/an-configuration/right/an@                                              ; Right AN configuration
	/StimGen/file      = 'STIMULI/Click`c`-`d`'                                                    ; filename for Click`c`-`d`
;	/StimGen/hash      = #/an-configuration#                                                       ; Hashsum for AN configuration

	/Outputfile        = 'RESULTS/Click`c`-`d`-out'                                                ; A name of output file for Click`c`-`d`
;	/StimFunction      = angen                                                                     ; A function which will be called to generate stimulus for Click`c`-`d` simulation and returns duration
;	/Simulation/stop   = @/STIMULI/Click`c`/StimFunction@(**@/STIMULI/Click`c`/StimGen@)*1000.     ; Stop time for Click `c`-`d`, got from Stimulus generator (in ms)
}
